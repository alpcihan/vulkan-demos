#version 450

layout(local_size_x = 32) in;
layout(local_size_y = 32) in;

struct Model{
    // triangle data
    uint offset;
    uint stride;
    // material
    uint diffuseMapId;
    vec3 diffuseColor;
};

struct Triangle {
    vec3 vertices[3];
    vec2 uvs[3];
    vec3 normal;  
};

struct SphereLight {
    vec3 position;
    vec3 emissiveColor;
    float radius;
};

layout(set = 0, binding = 0) uniform ModelCount {
    uint u_modelCount;
};

layout(set = 0, binding = 1) readonly buffer Models {
    Model r_models[];
};

layout(set = 0, binding = 2) uniform SphereLightCount {
    uint u_sphereLightCount;
};

layout(set = 0, binding = 3) readonly buffer SphereLights {
    SphereLight r_sphereLights[];
};

layout(set = 0, binding = 4) readonly buffer Triangles {
    Triangle r_triangles[];
};

layout(set = 0, binding = 5) uniform CameraData {
    mat4 u_view;
    mat4 u_projection;
};

layout(set = 0, binding = 6) uniform CameraPrevData {
    mat4 u_viewPrev;
    mat4 u_projectionPrev;
};

/* trace state 0 (to write) */ 
// r: diffuse.r
// g: diffuse.g
// b: diffuse.b
// a: depth
layout(set = 0, binding = 7, rgba16f) uniform image2D stateRGBD_Write; 
/* trace state 1 (to read) */
// r: diffuse.r
// g: diffuse.g
// b: diffuse.b
// a: depth
layout(set = 0, binding = 8, rgba16f) uniform image2D stateRGBD_Read; 
/* trace state 2 (to write) */
// r: sample count 
// g: is from previous frame
// b: -
// a: -                                                     
layout(set = 0, binding = 9, rgba16f) uniform image2D stateInfo_Write; 
/* trace state 3 (to read) */
// r: sample count 
// g: -
// b: -
// a: -                                                    
layout(set = 0, binding = 10, rgba16f) uniform image2D stateInfo_Read;

#define MAX_FLOAT 3.402823466e+38

struct Ray {
    vec3 origin;
    vec3 direction;
};

Ray createRay(vec3 origin, vec3 direction) {
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;

    return ray;
}

Ray createCameraRay(vec2 uv, in mat4 view, in mat4 projection) {
    const mat4 camToWorld = inverse(view);

    // camera origin
    vec3 origin = (camToWorld*vec4(0,0,0,1)).xyz;
    
    // invert the perspective projection of the view-space position
    vec3 direction = (inverse(projection) * vec4(uv, 0.0f, 1.0f)).xyz;

    // direction from camera to world space and normalize
    direction = (camToWorld * vec4(direction, 0.0f)).xyz;
    direction = normalize(direction);

    return createRay(origin, direction);
}

/* intersection functions */
void intersectRayTriangle(in Ray ray, Triangle triangle, inout float depth, inout float type) {
    const float EPSILON = 0.0000001;
    
    vec3 vertex0 = triangle.vertices[0];
    vec3 vertex1 = triangle.vertices[1];
    vec3 vertex2 = triangle.vertices[2];

    vec3 edge1 = vertex1 - vertex0;
    vec3 edge2 = vertex2 - vertex0;
    vec3 rayVecXe2 = cross(ray.direction, edge2);

    float det = dot(edge1, rayVecXe2);

    if (det > -EPSILON && det < EPSILON) return; // This ray is parallel to this triangle.

    float invDet = 1.0 / det;
    vec3 s = ray.origin - vertex0;
    float u = invDet * dot(s, rayVecXe2);

    if (u < 0.0 || u > 1.0) return;

    vec3 sXe1 = cross(s, edge1);
    float v = invDet * dot(ray.direction, sXe1);

    if (v < 0.0 || u + v > 1.0) return;

    // At this stage, we can compute t to find out where the intersection point is on the line.
    float t = invDet * dot(edge2, sXe1);

    if (t > EPSILON) { // ray intersection
        depth = t;
        type = 0; // diffuse material type
    }
}

void intersectSphereLight(Ray ray, in SphereLight sphereLight, inout float depth, inout float type) {
    // Calculate distance along the ray where the sphere is intersected
    vec3 d = ray.origin - sphereLight.position;
    float p1 = -dot(ray.direction, d);
    float p2sqr = p1 * p1 - dot(d, d) + sphereLight.radius * sphereLight.radius;
    if (p2sqr < 0)
        return;
    float p2 = sqrt(p2sqr);
    float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
    if (t > 0 ) {
        depth = t;
        type = 1; // emissive source type
    }
}

float calculateDepth(Ray ray) {
    float depth = MAX_FLOAT;
    float type = 0; // 0 -> diffuse, 1 -> emissive

    // spherical light sources
    for(int i = 0; i < u_sphereLightCount; i++) {
        intersectSphereLight(ray, r_sphereLights[i], depth, type);
    }
    
    // models
    for(int i = 0; i < u_modelCount; i++) {
        uint offset = r_models[i].offset;
        uint stride = r_models[i].stride;

        for(uint t = offset; t < offset + stride; t++) {
            intersectRayTriangle(ray, r_triangles[t], depth, type);
        }
    }

    return type > 0 ? MAX_FLOAT : depth; // only store diffuse info
}

void main() {
    ivec2 screenSize = imageSize(stateRGBD_Read);
    ivec2 writeTexCoord = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
    vec2 uv = vec2(vec2(writeTexCoord) / screenSize * 2.0f - 1.0f); // [-1, 1]
    
    // current camera ray
    Ray currentRay;
    currentRay = createCameraRay(uv, u_view, u_projection);

    // calculate current depth
    float currentDepth = calculateDepth(currentRay);
    
    // current frame -> world space 
    vec3 worldPos = currentDepth * currentRay.direction + currentRay.origin;

    // world space -> prev frame
    vec4 screenSpace = u_projectionPrev * u_viewPrev * vec4(worldPos,1);
    screenSpace /= screenSpace.w;
    vec2 prevUV = screenSpace.xy;
    ivec2 readTexCoord = ivec2(round(vec2(prevUV * 0.5 + 0.5) * screenSize));

    // update
    vec4 rgbd = vec4(0,0,0,currentDepth);
    vec4 info = vec4(0, 0, 0, 0);

    if(readTexCoord.x >= 0 && readTexCoord.x <= screenSize.x &&
       readTexCoord.y >= 0 && readTexCoord.y <= screenSize.y &&
       currentDepth < MAX_FLOAT) {
        
        const vec4 prevRGBD = imageLoad(stateRGBD_Read, readTexCoord);
        const vec4 prevInfo = imageLoad(stateInfo_Read, readTexCoord);

        if(prevRGBD.a < MAX_FLOAT)
        {
            Ray prevRay;
            prevRay = createCameraRay(prevUV, u_viewPrev, u_projectionPrev);
            const vec3 prevWorldPos = prevRGBD.a * prevRay.direction + prevRay.origin;

            if(distance(prevWorldPos, worldPos) < 0.00075 // distance threshold
               && prevInfo.x > 0)                        // sample threshold
            {
                rgbd.xyz = prevRGBD.xyz; // transfer color
                info.x = prevInfo.x;     // transfer sample count and
            }
        }
    }

    imageStore(stateRGBD_Write, writeTexCoord, rgbd);
    imageStore(stateInfo_Write, writeTexCoord, info);
}