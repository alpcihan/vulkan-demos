#version 460 core
#extension GL_EXT_nonuniform_qualifier: enable
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_ray_query : enable

layout(local_size_x = 32) in;
layout(local_size_y = 32) in;

struct Vertex {
    vec3 position;
    vec2 uv;
    vec3 normal;
    vec3 tangent;
};

struct Triangle {
    vec3 vertices[3];
    vec2 uvs[3];
    vec3 normal;  
};

struct SphereLight {
    vec3 position;
    vec3 emissiveColor;
    float radius;
};

struct BVHNode {
    vec3 aabbMin;
    vec3 aabbMax;
    uint leftChild;
    uint rightChild;
    uint firstTriangleIdx;
    uint triangleCount;
};

struct Ray {
    vec3 origin;
    vec3 direction;
};

struct RayHit {
    vec3 position;
    float dist;
    vec3 normal;
    vec3 diffuseColor;
    vec3 emissiveColor;
};

layout(set = 0, binding = 0) uniform SphereLightCount {
    uint u_sphereLightCount;
};

layout(set = 0, binding = 1) readonly buffer SphereLights {
    SphereLight r_sphereLights[];
};

layout(set = 0, binding = 2) readonly buffer Triangles {
    Triangle r_triangles[];
};

layout(set = 0, binding = 3) uniform CameraData {
    mat4 u_view;
    mat4 u_projection;
};

layout(set = 0, binding = 4, rgba16f) uniform image2D traceState;

layout(set = 0, binding = 5) uniform sampler2D s_randomNoise;
layout(set = 0, binding = 6) uniform RandomOffset {
    vec3 u_RANDOM3; // [0,1]
};

layout(set = 0, binding = 7) readonly buffer BVH {
    BVHNode r_bvh[];
};

layout(set = 0, binding = 8) readonly buffer TriangleIdx {
    uint r_triangleIdx[];
};

layout(set = 0, binding = 9) uniform accelerationStructureEXT tlas;
layout(set = 0, binding = 10) readonly buffer Vertices {
    Vertex vertices[];
};
layout(set = 0, binding = 11) readonly buffer Indices {
    uint indices[];
};


#define MAX_FLOAT 3.402823466e+38
vec2 _RUV;

float noise(vec2 uv) {
    return(texture(s_randomNoise,uv)).x;
}

float rnd1() {
    _RUV = fract(_RUV + (u_RANDOM3.xy + u_RANDOM3.yz)*u_RANDOM3.z);
    return noise(_RUV);
}

vec3 rnd3() {
    return vec3(rnd1(), rnd1(), rnd1());
}

/* utils */
vec3 random_on_hemisphere(in vec3 normal) {
    vec3 p = normalize(rnd3() * 2 - 1);

    if (dot(p, normal) < 0.0) // if not in the same hemisphere as the normal
        p = -p;
    
    return p;
}

Ray createRay(vec3 origin, vec3 direction) {
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;

    return ray;
}

Ray createCameraRay(vec2 uv) {
    const mat4 camToWorld = inverse(u_view);

    // camera origin
    vec3 origin = (camToWorld*vec4(0,0,0,1)).xyz;
    
    // invert the perspective projection of the view-space position
    vec3 direction = (inverse(u_projection) * vec4(uv, 0.0f, 1.0f)).xyz;

    // direction from camera to world space and normalize
    direction = (camToWorld * vec4(direction, 0.0f)).xyz;
    direction = normalize(direction);

    return createRay(origin, direction);
}

RayHit createRayHit() {
    RayHit hit;
    hit.position = vec3(0.0f, 0.0f, 0.0f);
    hit.dist = MAX_FLOAT;
    hit.normal = vec3(0.0f, 0.0f, 0.0f);
    return hit;
}

/* intersection functions */
void intersectRayTriangle(in Ray ray, in Triangle triangle, inout RayHit bestHit) {
    const float EPSILON = 0.0000001;
    
    vec3 vertex0 = triangle.vertices[0];
    vec3 vertex1 = triangle.vertices[1];
    vec3 vertex2 = triangle.vertices[2];

    vec3 edge1 = vertex1 - vertex0;
    vec3 edge2 = vertex2 - vertex0;
    vec3 rayVecXe2 = cross(ray.direction, edge2);

    float det = dot(edge1, rayVecXe2);

    if (det > -EPSILON && det < EPSILON) return; // This ray is parallel to this triangle.

    float invDet = 1.0 / det;
    vec3 s = ray.origin - vertex0;
    float u = invDet * dot(s, rayVecXe2);

    if (u < 0.0 || u > 1.0) return;

    vec3 sXe1 = cross(s, edge1);
    float v = invDet * dot(ray.direction, sXe1);

    if (v < 0.0 || u + v > 1.0) return;

    // At this stage, we can compute t to find out where the intersection point is on the line.
    float t = invDet * dot(edge2, sXe1);

    if (t < bestHit.dist && t > EPSILON) { // ray intersection
        bestHit.position = ray.origin + ray.direction * t;
        bestHit.dist = t;
        bestHit.normal = triangle.normal;
        
        bestHit.emissiveColor = vec3(0);

        // Calculate barycentric coordinates
        float w = 1.0 - u - v;
        float sU = u * triangle.uvs[1].x + v * triangle.uvs[2].x + w * triangle.uvs[0].x;
        float sV = u * triangle.uvs[1].y + v * triangle.uvs[2].y + w * triangle.uvs[0].y;

        bestHit.diffuseColor = vec3(1,1,1);
    }
}

void intersectSphereLight(in Ray ray, in SphereLight sphereLight, inout RayHit bestHit) {
    // Calculate distance along the ray where the sphere is intersected
    vec3 d = ray.origin - sphereLight.position;
    float p1 = -dot(ray.direction, d);
    float p2sqr = p1 * p1 - dot(d, d) + sphereLight.radius * sphereLight.radius;
    if (p2sqr < 0)
        return;
    float p2 = sqrt(p2sqr);
    float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
    if (t > 0 && t < bestHit.dist) {
        bestHit.dist = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = normalize(bestHit.position - sphereLight.position);
        bestHit.diffuseColor = sphereLight.emissiveColor;
        bestHit.emissiveColor = sphereLight.emissiveColor;
    }
}

bool intersectAABB(in Ray ray, vec3 aabbMin, vec3 aabbMax)
{
    vec3 invDirection = 1.0 / ray.direction; // TODO: precalculate the inv direction
    vec3 t1 = (aabbMin - ray.origin) * invDirection;
    vec3 t2 = (aabbMax - ray.origin) * invDirection;

    vec3 tmin = min(t1, t2);
    vec3 tmax = max(t1, t2);

    float tenter = max(max(tmin.x, tmin.y), tmin.z);
    float texit = min(min(tmax.x, tmax.y), tmax.z);

    return tenter < texit && texit > 0.0;
}

void intersectBVH(in Ray ray, inout RayHit bestHit)
{
    uint stack[64];
    uint stackIndex = 0;
    stack[stackIndex++] = 0;

    while (stackIndex > 0)
    {
        uint nodeIdx = stack[--stackIndex];
        BVHNode node = r_bvh[nodeIdx];

        if (intersectAABB(ray, node.aabbMin, node.aabbMax))
        {
            if (node.triangleCount > 0)
            {
                for (uint i = 0; i < node.triangleCount; ++i)
                {
                    Triangle triangle = r_triangles[r_triangleIdx[node.firstTriangleIdx + i]];
                    intersectRayTriangle(ray, triangle, bestHit);
                }
            }
            else
            {
                stack[stackIndex++] = node.leftChild;
                stack[stackIndex++] = node.leftChild + 1;
            }
        }
    }
}

float intersectTLAS(in Ray ray, inout RayHit bestHit) {
    uint  rayFlags = gl_RayFlagsOpaqueEXT;
    float tMin     = 0.0001;
    float tMax     = 10000.0;
    
    rayQueryEXT rayQuery;

    rayQueryInitializeEXT(
        rayQuery,               // ray query
        tlas,                   // acceleration structure
        gl_RayFlagsOpaqueEXT,   // rayFlags
        0xFF,                   // cullMask
        ray.origin,             // ray origin
        0.0001,                 // ray min range
        ray.direction,          // ray direction
        100.0);               // ray max range

    while(rayQueryProceedEXT(rayQuery))
    {
    }

    // get distance
    const float t = rayQueryGetIntersectionTEXT(rayQuery, true);
    if(t < tMax && t < bestHit.dist){
        bestHit.dist = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.diffuseColor = vec3(1);
        bestHit.emissiveColor = vec3(0);

        // calculate normal
        const int primitiveID = rayQueryGetIntersectionPrimitiveIndexEXT(rayQuery, true);

        // Get the indices of the vertices of the triangle
        const uint i0 = indices[3 * primitiveID + 0];
        const uint i1 = indices[3 * primitiveID + 1];
        const uint i2 = indices[3 * primitiveID + 2];

        // Get the vertices of the triangle
        const vec3 v0 = vertices[i0].position;
        const vec3 v1 = vertices[i1].position;
        const vec3 v2 = vertices[i2].position;

        const vec3 normal = normalize(cross(v1 - v0, v2 - v0));
        bestHit.normal = normal;
    }

    return t;
}

/* trace */
RayHit checkHit(Ray ray) {
    RayHit bestHit = createRayHit();

    // spherical light sources
    for(int i = 0; i < u_sphereLightCount; i++) {
        intersectSphereLight(ray, r_sphereLights[i], bestHit);
    }

    intersectTLAS(ray, bestHit);
    
    // models
    //intersectBVH(ray, bestHit);
    return bestHit;
}

vec3 trace(Ray ray) {   
    vec3 incomingLight = vec3(0);
    vec3 rayColor = vec3(1);

    // TODO: can also iterate this over frames
    for(int i = 0; i < 4; i++)
    {
        // check hit
        RayHit hit = checkHit(ray);
        
        // info update
        if (hit.dist < MAX_FLOAT) {  
            ray.origin = hit.position + hit.normal * 0.001f;
            ray.direction = random_on_hemisphere(hit.normal);

            float lightStrength = dot(hit.normal, ray.direction);
            incomingLight += hit.emissiveColor * rayColor;
            rayColor *= hit.diffuseColor * lightStrength;
        }
        else
        {
            break;
        }
    }

    return incomingLight;
}

void main() {  

    ivec2 screenSize = imageSize(traceState);
    ivec2 id = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
    
    vec2 uv = vec2(((vec2(id)) + vec2(rnd1(), rnd1())) / screenSize * 2.0f - 1.0f);
    _RUV = uv;
    
    // read the trace states
    const vec4 state = imageLoad(traceState, id);

    Ray ray = createCameraRay(uv);
    
    // TODO: first trace already gets calculated in camera-update.comp for depth calculation. Use it.
    vec3 color = trace(ray); 

    // accumulate
    float sampleCount = state.a + 1;
    float weight = 1.0 / (sampleCount);
    vec3 finalColor = state.xyz * (1-weight) + color * weight;

    // update the trace states
    vec4 rgbw = vec4(finalColor, sampleCount);

    imageStore(traceState, id, rgbw); 
}